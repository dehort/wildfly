# translation auto-copied from project JBoss AS, version eap6, document org.jboss.as/jboss-as-logging/org/jboss/as/logging/LocalDescriptions, author jdimanos
logging=Die Konfiguration des Protokollierungs-Untersystems.
# translation auto-copied from project JBoss AS, version eap6, document org.jboss.as/jboss-as-logging/org/jboss/as/logging/LocalDescriptions, author jdimanos
logging.add=F\u00FCgt das Protokollierungs-Untersystem hinzu.
# translation auto-copied from project JBoss AS, version eap6, document org.jboss.as/jboss-as-logging/org/jboss/as/logging/LocalDescriptions, author jdimanos
logging.remove=Entfernt das Protokollierungs-Untersystem.
logging.add-logging-api-dependencies=Zeigt an, ob Protokoll API-Abh\u00E4ngigkeiten den Deployments w\u00E4hred des Deploymentvorgangs hinzugef\u00FCgt werden sollen. A Wert von "true" f\u00FCgt dem Deployment Abh\u00E4ngigkeiten hinzu. Ein Wert von "false" \u00FCberspringt die Bearbeitung des Deployments hinsichtlich Protokoll API-Abh\u00E4ngigkeiten.
logging.logging-profile=Ein Profil, das einem Deployment f\u00FCr seine Protokollierungskonfiguration zugewiesen werden kann.
logging.logging-profile.add=F\u00FCgt ein Protokollierungsprotokoll hinzu.
logging.logging-profile.remove=Entfernt das Protokollierungsprofil und alle assoziierten Logger und Handler.
logging.root-logger=Definiert den root-Logger f\u00FCr diesen Protokollkontext.
logging.root-logger.remove=Entfernung des root-Loggers.
logging.root-logger.add=Hinzuf\u00FCgung des root-Loggers.
logging.root-logger.add-handler=F\u00FCgt dem Logger einen Handler hinzu.
logging.root-logger.add-handler.name=Der Name des hinzuzuf\u00FCgenden Handlers.
logging.root-logger.remove-handler=Entfernt einen Handler von dem Logger.
logging.root-logger.remove-handler.name=Der Name des zu entfernenden Loggers.
logging.root-logger.remove-root-logger=Entfernung des root-Loggers.
logging.root-logger.remove-root-logger.deprecated=Verwenden Sie die remove-Operation.
logging.root-logger.change-root-log-level=\u00C4nderung der root-Logger-Ebene.
logging.root-logger.change-root-log-level.deprecated=Verwenden Sie die write-attribute Operation.
logging.root-logger.root-logger-assign-handler.deprecated=Verwenden Sie die add-handler Operation.
logging.root-logger.root-logger-assign-handler=Dem root-Logger einen Handler zuordnen.
logging.root-logger.root-logger-assign-handler.name=Der Name des hinzuzuf\u00FCgenden Handlers.
logging.root-logger.root-logger-unassign-handler=Die Zurodnung eines root-Logger zu einen Handler l\u00F6schen.
logging.root-logger.root-logger-unassign-handler.deprecated=Verwenden Sie die remove-handler Operation.
logging.root-logger.root-logger-unassign-handler.name=Der Name des zu entfernenden Handlers.
logging.root-logger.set-root-logger=Dasselbe ist wie add-Operation
logging.root-logger.set-root-logger.deprecated=Verwenden Sie die add-Operation.
logging.logger=Definiert eine Logger-Kategorie.
logging.logger.add=Hinzuf\u00FCgung einer neuen Logger-Kategorie.
logging.logger.remove=Entfernung einer bestehenden Logger-Kategorie.
logging.logger.add-handler=F\u00FCgt dem Loggers einen Handler hinzu.
logging.logger.add-handler.name=Der Name des hinzuzuf\u00FCgenden Handlers.
logging.logger.remove-handler=Entfernt einen Handler von dem Logger.
logging.logger.remove-handler.name=Der Name des zu entfernenden Loggers.
logging.logger.change-log-level=\u00C4nderung der Protokollierungsebene f\u00FCr eine Logger-Kategorie
logging.logger.change-log-level.deprecated=Verwenden Sie die write-attribute Operation.
logging.logger.assign-handler=Dem Logger einen Handler zuordnen.
logging.logger.assign-handler.deprecated=Verwenden Sie die add-handler Operation.
logging.logger.assign-handler.name=Der Name des hinzuzuf\u00FCgenden Handlers.
logging.logger.unassign-handler=Die Zurodnung eines Loggers zu einen Handler l\u00F6schen.
logging.logger.unassign-handler.deprecated=Verwenden Sie die remove-handler Operation.
logging.logger.unassign-handler.name=Der Name des zu entfernenden Handlers.
logging.logger.name=Name des Loggers
logging.logger.use-parent-handlers=Legt fest, ob dieser Logger seine Ausgabe an den \u00FCbergeordneten Logger senden soll.
logging.logger.category=Legt die Kategorie f\u00FCr den Logger fest.
logging.async-handler=Definiert einen Handler, der in einem asynchronen Thread in die Unter-Handler  schreibt. Wird f\u00FCr Handler verwendet, die eine ma\u00DFgebliche Menge an Verz\u00F6gerung mit sich bringen.
logging.async-handler.queue-length=Die L\u00E4nge der Warteschlange vor der R\u00E4umung von Schreibvorg\u00E4ngen. 
logging.async-handler.overflow-action=Legen Sie fest, was bei einem \u00DCberlauf unternommen werden soll. Die g\u00FCltigen Optionen sind 'block' und 'discard'
logging.async-handler.subhandlers=Die mit diesem ASYNC-Handler assoziierten Handler. 
logging.async-handler.subhandlers.handler=Der mit diesem ASYNC-Handler assoziierte Sub-Handler. 
logging.console-handler=Definiert einen Handler, der in die Konsole schreibt. 
logging.console-handler.add=Hinzuf\u00FCgung eines neuen Konsolen-Handlers.
logging.file-handler=Definiert einen Handler, der in eine Datei schreibt. 
logging.file-handler.add=Hinzuf\u00FCgung eines neuen Datei-Handlers.
logging.periodic-rotating-file-handler=Definiert einen Handler, der in eine Datei schreibt, wobei das Protokoll nach einer vom Suffix-String abgeleiteten Zeitdauer rotiert wird, einem Format, das vom  java.text.SimpleDateFormat verstanden werden sollte.
logging.periodic-rotating-file-handler.add=Hinzuf\u00FCgung eines neuen, periodisch rotierenden Datei-Handlers.
logging.periodic-rotating-file-handler.suffix=Setzt den Suffix-String.  Der String ist in einem Format, das vom java.text.SimpleDateFormat verstanden werden kann. Der Zeitraum der Rotation wird basierend auf den Suffix automatisch kalkuliert.
logging.size-rotating-file-handler.add=Hinzuf\u00FCgung eines neuen, gr\u00F6\u00DFenrotierenden Datei-Handlers.
logging.size-rotating-file-handler.max-backup-index=Die maximale Anzahl aufzubewahrender Backups.
logging.size-rotating-file-handler.rotate-size=Die Gr\u00F6\u00DFe, bei der die Protokolldatei rotiert werden soll.
logging.size-rotating-file-handler.rotate-on-boot=Zeigt an, dass die Datei bei jeder \u00C4nderung des Dateiattributs rotiert werden soll. Dies geschieht immer zum Zeitpunkt der Initialisierung.
logging.custom-handler=Definiert einen benutzerdefinierten Protokollierungs-Handler. Der benutzerdefinierte Handler muss den java.util.logging.Handler erweitern.
logging.custom-handler.class=Die zu verwendende Logging-Handler-Klasse. 
logging.custom-handler.module=Das Modul, von dem der Logging-Handler abh\u00E4ngt.
logging.custom-handler.properties=Definiert die f\u00FCr den Logging-Handler verwendeten Properties. Alle Properties m\u00FCssen \u00FCber eine Setter-Methode zug\u00E4nglich sein.
logging.custom-handler.properties.name=Definiert den Namen der einzustellenden Property.
logging.custom-handler.properties.value=Definiert den Wert der Property.
logging.syslog-handler=Definiert einen syslog-Handler.
logging.syslog-handler.add=F\u00FCgt einen neuen syslog-Handler hinzu.
logging.syslog-handler.remove=Definiert den syslog-Handler.
logging.syslog-handler.app-name=Der zur Formatierung der Nachricht im RFC5424-Format verwendete app-Name. Der app-Name lautet standardm\u00E4\u00DFig "java".
logging.syslog-handler.facility=Facility wie durch RFC-5424 (http\://tools.ietf.org/html/rfc5424) und RFC-3164 (http\://tools.ietf.org/html/rfc3164) definiert.
logging.syslog-handler.hostname=Der Name des Host von dem aus die Nachrichten verschickt werden. Zum Beispiel der Name des Host auf dem der Applikationsserver l\u00E4uft.
logging.syslog-handler.port=Der Port, an dem der syslog-Server horcht.
logging.syslog-handler.server-address=Die Adresse des syslog-Servers.
logging.syslog-handler.syslog-format=Formattiert die Protokollnachricht gem\u00E4\u00DF der RFC-Spezifikation.
logging.pattern-formatter=Ein Muster-Formattierer zur Verwendung mit Handlern.
logging.pattern-formatter.add=F\u00FCgt einen neuen Muster-Formattierer hinzu.
logging.pattern-formatter.remove=Entfernt den Muster-Formattierer.
logging.pattern-formatter.pattern=Definiert ein Muster f\u00FCr den Formattierer.
logging.pattern-formatter.color-map=Das color-map Attribut erm\u00F6glicht die Verwendung einer durch Kommas separierten Liste f\u00FCr verschiedene Ebenen mit einem Muster-Formattierer. Das Format f\u00FCr das Farbmapping-Muster ist level-name\:color-name. G\u00FCltige Ebenen (Levels)\: severe, fatal, error, warn, warning, info, debug, trace, config, fine, finer, finest. G\u00FCltige Farben\: black, green, red, yellow, blue, magenta, cyan, white, brightblack, brightred, brightgreen, brightblue, brightyellow, brightmagenta, brightcyan, brightwhite
logging.custom-formatter=Ein benutzerdefinierter Formattierer zur Verwendung mit Handlern. Beachten Sie, dass die meisten Protokolleintr\u00E4ge im printf-Format formattiert sind. Es ist m\u00F6glich, dass f\u00FCr Formattierer ein Aufruf von org.jboss.logmanager.ExtLogRecord\#getFormattedMessage() notwendig ist, damit die Nachricht ordnungsgem\u00E4\u00DF formattiert wird.
logging.custom-formatter.add=F\u00FCgt einen neuen benutzerdefinierten Formattierer hinzu.
logging.custom-formatter.remove=Entfernt den benutzerdefinierten Formattierer.
logging.custom-formatter.class=Die zu verwendende Logging-Handler-Klasse. 
logging.custom-formatter.module=Das Modul, von dem der Logging-Handler abh\u00E4ngt.
logging.custom-formatter.properties=Definiert die f\u00FCr den Logging-Handler verwendeten Properties. Alle Properties m\u00FCssen \u00FCber eine Setter-Methode zug\u00E4nglich sein.
logging.custom-formatter.properties.name=Definiert den Namen der einzustellenden Property.
logging.custom-formatter.properties.value=Definiert den Wert der Property.
